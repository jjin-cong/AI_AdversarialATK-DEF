{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"20220705_trafficsign_MobileNet의 사본","private_outputs":true,"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPdYTFvKPgjJUr0m8M5yPVN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"4-RHEVWoGg2o"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import os\n","import time\n","import random\n","import matplotlib.pyplot as plt \n","import seaborn as sns\n","\n","from glob import glob\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score,confusion_matrix\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import GridSearchCV\n","from skimage.feature import hog\n","\n","import PIL\n","import cv2\n","import pickle\n","\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import matplotlib.image as img\n","import keras\n","import os\n","from PIL import Image\n","import natsort\n","import io\n","import cv2\n","\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","import tensorflow as tf\n","import tensorflow.keras.layers as tfl\n","\n","from tensorflow.keras.preprocessing import image_dataset_from_directory\n","from tensorflow.keras.layers.experimental.preprocessing import RandomFlip, RandomRotation"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"ndWmsr5wGvvx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cd drive/MyDrive/[한이음] 적대적 AI 공격에 대한 인공지능 보안기술 연구/3. 소스코드/GTSRB"],"metadata":{"id":"R84inrUEG0ru"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 43개 클래스 모두 사용\n","classes = { 0:'Speed limit (20km/h)',\n","            1:'Speed limit (30km/h)', \n","            2:'Speed limit (50km/h)', \n","            3:'Speed limit (60km/h)', \n","            4:'Speed limit (70km/h)', \n","            5:'Speed limit (80km/h)', \n","            6:'End of speed limit (80km/h)', \n","            7:'Speed limit (100km/h)', \n","            8:'Speed limit (120km/h)', \n","            9:'No passing', \n","            10:'No passing veh over 3.5 tons', \n","            11:'Right-of-way at intersection', \n","            12:'Priority road', \n","            13:'Yield', \n","            14:'Stop', \n","            15:'No vehicles', \n","            16:'Veh > 3.5 tons prohibited', \n","            17:'No entry', \n","            18:'General caution', \n","            19:'Dangerous curve left', \n","            20:'Dangerous curve right', \n","            21:'Double curve', \n","            22:'Bumpy road', \n","            23:'Slippery road', \n","            24:'Road narrows on the right', \n","            25:'Road work', \n","            26:'Traffic signals', \n","            27:'Pedestrians', \n","            28:'Children crossing', \n","            29:'Bicycles crossing', \n","            30:'Beware of ice/snow',\n","            31:'Wild animals crossing', \n","            32:'End speed + passing limits', \n","            33:'Turn right ahead', \n","            34:'Turn left ahead', \n","            35:'Ahead only', \n","            36:'Go straight or right', \n","            37:'Go straight or left', \n","            38:'Keep right', \n","            39:'Keep left', \n","            40:'Roundabout mandatory', \n","            41:'End of no passing', \n","            42:'End no passing veh > 3.5 tons' }"],"metadata":{"id":"Y-xTV4VHG3WJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["metainfo = pd.read_csv(\"Meta.csv\")\n","traininfo = pd.read_csv(\"Train.csv\")\n","testinfo = pd.read_csv(\"Test.csv\")"],"metadata":{"id":"QqEXv7_mIySI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["imgs_path = \"Train\"\n","data_list = []\n","labels_list = []\n","result_class = [14,17,27]\n","for i in result_class:\n","    i_path = os.path.join(imgs_path, str(i)) #14, 17, 27\n","    for img in os.listdir(i_path):\n","        im = Image.open(i_path +'/'+ img)\n","        im = im.resize((128,128))\n","        im = np.array(im)\n","        data_list.append(im)\n","        labels_list.append(i)\n","data = np.array(data_list)\n","labels = np.array(labels_list)\n","print(\"Done\")"],"metadata":{"id":"Vou7yOB-G4Gu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import natsort\n","\n","imgs_path = \"Test\"\n","data_list = []\n","labels_list = []\n","\n","for img in natsort.natsorted(os.listdir(imgs_path)):\n","    im = Image.open(imgs_path +'/'+ img)\n","    im = im.resize((128,128))\n","    im = np.array(im)\n","    data_list.append(im)\n","data_test = np.array(data_list)\n","\n","for i in range(len(testinfo.ClassId)):\n","    labels_list.append(testinfo.ClassId[i])\n","\n","labels_test = np.array(labels_list)\n","print(\"Done\")"],"metadata":{"id":"4-xFzHZDG6lt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["labels_test_index = []\n","for i in range(len(labels_test)):\n","    if (labels_test[i] == 14) | (labels_test[i] == 17) | (labels_test[i] == 27):\n","        labels_test_index.append(i)\n","\n","\n","test_data = []\n","test_label = []\n","for i in labels_test_index:\n","    test_data.append(data_test[i])\n","    test_label.append(labels_test[i])\n","data_test = np.array(test_data)   \n","labels_test = np.array(test_label)"],"metadata":{"id":"Ky1o46ksG-ql"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(labels_test[300])\n","plt.imshow(data_test[300])\n","plt.show()"],"metadata":{"id":"4CsU9vbNG0TI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(labels[1000])\n","plt.imshow(data[1000])\n","plt.show()"],"metadata":{"id":"4Xq2a4ilHIb-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data.shape"],"metadata":{"id":"8mcDeZ8UHKxR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["labels"],"metadata":{"id":"iYgkFA3AJPIJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 데이터 증강"],"metadata":{"id":"PndzYzMDJrg_"}},{"cell_type":"code","source":["def data_augmenter():\n","\n","    data_augmentation = tf.keras.Sequential()\n","    data_augmentation.add(RandomFlip(\"horizontal\"))\n","    data_augmentation.add(RandomRotation(0.2))\n","    \n","    return data_augmentation"],"metadata":{"id":"K-6bkaxRJUsw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_augmentation = data_augmenter()\n","\n","plt.figure(figsize = (10,10))\n","first_image = data[0]\n","for i in range(9):\n","    ax = plt.subplot(3,3,i+1)\n","    augmented_image = data_augmentation(tf.expand_dims(first_image,0))\n","    plt.imshow(augmented_image[0] / 255)\n","    plt.axis('off')"],"metadata":{"id":"KT4ToOzQJePw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 선학습된 MobileNet으로 학습 진행"],"metadata":{"id":"6Q6T8ffoJxH0"}},{"cell_type":"code","source":["preprocess_input = tf.keras.applications.mobilenet_v2.preprocess_input"],"metadata":{"id":"pn2mK69aJhgR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["IMG_SIZE = (128,128)\n","IMG_SHAPE = IMG_SIZE + (3,)\n","base_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,\n","                                               include_top=True,\n","                                               weights='imagenet')"],"metadata":{"id":"CnnnchDFJqcu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["base_model.summary()"],"metadata":{"id":"yxoSfQyrJ69_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["nb_layers = len(base_model.layers)\n","print(base_model.layers[nb_layers - 2].name)\n","print(base_model.layers[nb_layers - 1].name)"],"metadata":{"id":"4pWPBRcUK7F4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["base_model.trainable = False\n","image_var = tf.Variable(data,dtype = float)\n","pred = base_model(image_var)\n","\n","tf.keras.applications.mobilenet_v2.decode_predictions(pred.numpy(), top=2)"],"metadata":{"id":"2tXC6MxmLAi7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def trafficsign_model(image_shape=IMG_SIZE, data_augmentation=data_augmenter()):\n","    \n","    input_shape = image_shape + (3,)\n","    \n","    base_model = tf.keras.applications.MobileNetV2(input_shape=input_shape,\n","                                                   include_top=False,\n","                                                   weights='imagenet')\n","    \n","    base_model.trainable = False\n","    \n","    inputs = tf.keras.Input(shape=input_shape) \n","\n","    x = data_augmentation(inputs)\n","    \n","    x = preprocess_input(x) \n","\n","    x = base_model(x, training=False) \n","    \n","    x = tfl.GlobalAveragePooling2D()(x) \n","\n","    x = tfl.Dropout(0.2)(x)\n","        \n","    prediction_layer = tfl.Dense(1)\n","\n","    \n","    outputs = prediction_layer(x) \n","    model = tf.keras.Model(inputs, outputs)\n","    \n","    return model"],"metadata":{"id":"nHHRm7AyLCkW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model2 = trafficsign_model(IMG_SIZE, data_augmentation)"],"metadata":{"id":"rI3XSmfBLxnN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["base_learning_rate = 0.01\n","model2.compile(optimizer=tf.keras.optimizers.Adam(lr=base_learning_rate),\n","              loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),\n","              metrics=['accuracy'])"],"metadata":{"id":"n6XMc7QJL1ge"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["initial_epochs = 7\n","history = model2.fit(data,labels, epochs=initial_epochs)"],"metadata":{"id":"ZOs_gfXAL4F1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pwd"],"metadata":{"id":"xXiZQKo1OE0F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from keras.models import load_model\n","\n","model2.save('trafficsing_classify_model.h5')"],"metadata":{"id":"MqC1UCo2L_Om"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#0 값이 not-polluted, 1이 polluted\n","def model_predict(model,x):\n","    pred_labels = []\n","    \n","    image_var = tf.Variable(x,dtype = float)\n","    pred = model(image_var)\n","    \n","    pred.numpy()\n","    \n","    pred = np.where(pred>0,0,1)\n","    \n","    for i in range(len(pred)):\n","        if pred[i] == 14:\n","            pred_labels.append('Stop')\n","        elif pred[i] == 17:\n","            pred_labels.append('No entry')\n","        else:\n","            pred_labels.append('Pedestrians')\n","    \n","    return pred, pred_labels"],"metadata":{"id":"SaSbruJ_MP4E"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(labels_test[2])\n","plt.imshow(data_test[2])\n","plt.show()"],"metadata":{"id":"9sn3HgePMQwg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_test[2].shape"],"metadata":{"id":"NgDf3jhsOQOY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["img = data_test[2]"],"metadata":{"id":"9ToPLQ-KOazR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["img = img.reshape(1,128,128,3)\n","img.shape"],"metadata":{"id":"FwuYVb0IOWIY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_predict(model2,img)"],"metadata":{"id":"_yeoDDHLOflF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"4fwWJdVFPpph"},"execution_count":null,"outputs":[]}]}